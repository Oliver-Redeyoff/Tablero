{"version":3,"sources":["images/Tablero.mp4","images/front-page-bg-2.jpg","images/front-page-img-1.jpeg","pages/HomePage.js","pages/Editor.js","images/logo.svg","App.js","reportWebVitals.js","index.js"],"names":["HomePage","Container","fluid","className","style","backgroundImage","bg","borderRight","marginBottom","Row","backgroundColor","Col","sm","lg","padding","src","img","height","display","margin","alt","marginTop","ListGroup","width","Item","variant","promoVideo","preload","position","autoHide","autoHideTime","WidgetDragTypes","API_URL","createGridWidgetFromWidget","widget","location","copiedWidget","cloneDeep","Grid","gridWidgets","changeGridWidgets","gridTiles","i","Math","floor","push","GridTile","removeCallback","index","copyWidgets","filter","ele","eleIndex","editCallback","newConfig","newWidget","config","top","left","map","gridTile","gridWidget","GridWidget","useDrop","accept","drop","item","current","onDrop","ref","size","useState","modalOpen","setModalOpen","configValue","updateConfigValue","updateConfigValueWrapper","configKey","value","old","x","y","Modal","show","Header","title","Body","Form","Object","entries","key","val","GridWidgetFormItem","updateConfigValueCallback","Footer","Button","onClick","color","fontSize","right","borderRadius","border","paddingTop","textAlign","cursor","bottom","borderTop","borderLeft","borderTopLeftRadius","zIndex","fontWeight","iconURL","maxWidth","maxHeight","transform","formValue","updateFormValue","useReducer","forceUpdate","updateFormValueWrapper","listUpdate","newArray","length","Array","isArray","Group","Label","ind","listRemove","marginLeft","Control","type","onChange","event","target","ControlPanel","widgets","triggerGetConfig","Tabs","Tab","eventKey","Widgets","Config","CardColumns","values","Widget","widgetInfo","useDrag","drag","Card","Img","pointerEvents","Title","description","Text","initialTheme","bgColor","initialRefreshRate","refreshFrequency","selectedTheme","changeSelectedTheme","refreshRate","changeRefreshRate","onSubmit","e","preventDefault","placeholder","fetch","method","headers","body","JSON","stringify","then","resp","json","success","console","warn","log","catch","err","Editor","updateWidgets","setConfig","getConfigTrigger","saving","changeSaving","userLoggedIn","changeUserLoggedIn","failedLogin","setFailedLogin","deviceName","updateDeviceName","secret","updateSecret","useEffect","response","grid","parents","id","widgetConfigs","widgetConfig","keys","forEach","widgetSizes","baseObject","widgetSize","sizedObject","backdrop","centered","keyboard","Alert","DndProvider","backend","HTML5Backend","marginRight","to_send","App","homePage","setHomePage","Navbar","transition","Brand","href","logo","Collapse","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29b72d67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Tablero.6efcd9c3.mp4\";","export default __webpack_public_path__ + \"static/media/front-page-bg-2.aed51055.jpg\";","export default __webpack_public_path__ + \"static/media/front-page-img-1.59b79111.jpeg\";","import { \n    Container, \n    Row, \n    Col, \n    ListGroup, \n} from \"react-bootstrap\";\nimport {Player, BigPlayButton, ControlBar} from 'video-react'\nimport promoVideo from \"../images/Tablero.mp4\"\nimport bg from \"../images/front-page-bg-2.jpg\"\nimport img from \"../images/front-page-img-1.jpeg\"\nimport \"../style.css\"\nimport \"../reactVideo.css\"\n\nfunction HomePage() {\n    return (\n        <Container fluid>\n            <div className=\"frontPage\" style={{ backgroundImage: `url(${bg})` }}>\n                <div className=\"frontPageBgDarken\"></div>\n                <h1 className=\"buzzwords\">\n                    <h1 style={{borderRight: \"10px solid rgb(255, 66, 49)\"}}>Modern</h1>\n                    <h1 style={{borderRight: \"10px solid rgb(244, 196, 95)\"}}>Simple</h1>\n                    <h1 style={{borderRight: \"10px solid rgb(99, 202, 183)\"}}>Smart</h1>\n                </h1>\n            </div>\n\n            <div className=\"description\">\n                <h1 style={{marginBottom: \"20px\"}}>What is Tablero?</h1>\n                <p>Tablero is a dashboard that compiles the information that is most important to you on a eink display. \n                This display is high resolution and paper like, allowing it to integrate seemlessly into it's environment and be as undistracting as possible.</p>\n            </div>\n            \n            <Row style={{backgroundColor: \"rgba(70, 70, 70, 0.1)\"}}>\n                <Col sm=\"12\" lg=\"6\" style={{padding: \"50px\"}}>\n                    <img src={img} style={{height: \"400px\", display: \"block\", margin: \"0px auto\"}} alt=\"\"/>\n                </Col>\n                <Col sm=\"12\" lg=\"6\" style={{marginTop: \"75px\"}}>\n                    <ListGroup style={{width: \"400px\"}}>\n                        <ListGroup.Item>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item><b>Displays</b></ListGroup.Item>\n                                <ListGroup.Item>Notes</ListGroup.Item>\n                                <ListGroup.Item>Todo lists</ListGroup.Item>\n                                <ListGroup.Item>Weahter</ListGroup.Item>\n                                <ListGroup.Item>Calendar</ListGroup.Item>\n                                <ListGroup.Item>Pictures</ListGroup.Item>\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n            </Row>\n\n            <Row style={{padding: \"50px 80px\", marginTop: \"40px\"}}>\n                <Col>\n                    <Player src={promoVideo} preload=\"auto\">\n                        <BigPlayButton position=\"center\" />\n                        <ControlBar autoHide={true} autoHideTime={500}/>\n                    </Player>\n                </Col>\n            </Row>\n            \n        </Container>\n    )\n}\n\nexport default HomePage","import React, {useState, useEffect, useReducer} from \"react\"\nimport { \n    Container, \n    Row, \n    Col,\n    Tabs,\n    Tab,\n    CardColumns,\n    CardDeck,\n    Card,\n    Button,\n    Form,\n    Modal,\n    Alert,\n} from \"react-bootstrap\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\"\nimport {HTML5Backend} from \"react-dnd-html5-backend\"\nimport {cloneDeep} from \"lodash\";\n\nconst WidgetDragTypes = {\n    WIDGET: 'widget'\n}\n\nconst API_URL = 'https://europe-west2-la-hacks-308508.cloudfunctions.net'\nconsole.log(\"has loaded the api url\")\n\nfunction createGridWidgetFromWidget(widget, location) {\n    const copiedWidget = cloneDeep(widget);\n    copiedWidget['x'] = location[0]\n    copiedWidget['y'] = location[1]\n    return copiedWidget\n}\n\nfunction Editor() {\n\n    const [gridWidgets, changeGridWidgets] = useState([])\n    const [widgets, updateWidgets] = useState([])\n    const [config, setConfig] = useState({})\n    const [getConfigTrigger, triggerGetConfig] = useState(false)\n\n    const [saving, changeSaving] = useState(false)\n    const [userLoggedIn, changeUserLoggedIn] = useState(false)\n    const [failedLogin, setFailedLogin] = useState(false)\n    const [deviceName, updateDeviceName] = useState(\"\")\n    const [secret, updateSecret] = useState(\"\")\n    \n    // Calls get-config endpoint\n    useEffect(() => {\n        if (!userLoggedIn) {\n            return\n        }\n        fetch(API_URL + '/get-config', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'user_id': deviceName,\n                'secret': secret\n            })\n        }).then((response) => \n            response.json()\n        ).then((json) => {\n            if (json.config != null) {\n                setConfig(json.config)\n            }\n            if (json.grid != null) {\n                changeGridWidgets(json.grid.map((item) => {\n                    const parents = widgets.filter(ele => ele.id == item.id)\n                    if (parents.length > 0) {\n                        const fullWidget = {...cloneDeep(parents[0]), ...item}\n                        return fullWidget\n                    }\n                    return null\n                    \n                }).filter(ele => ele != null))\n            }\n        }).catch(e => {console.warn(e)})\n    }, [widgets, getConfigTrigger, userLoggedIn])\n\n    // Calls get-widgets endpoint\n    useEffect(() => {\n        fetch(API_URL + '/get-widgets').then((response) => \n                response.json()\n            ).then((json) => {\n\n                if (json.widgets != null) {\n                    const widgetConfigs = []\n\n                    for (const widgetConfig of json.widgets) {\n\n                        Object.keys(widgetConfig).forEach((key) => {\n                            const widgetSizes = [];\n                            const baseObject = cloneDeep(widgetConfig[key])\n                            baseObject.id = key;\n\n                            for (let widgetSize of ['sm', 'md', 'lg']) {\n                                if (baseObject[widgetSize] != null) {\n                                    const sizedObject = cloneDeep(baseObject)\n                                    sizedObject.size = baseObject[widgetSize]\n                                    sizedObject.title = baseObject.title + \" - \" + widgetSize\n                                    sizedObject.id = key + \"-\" + widgetSize\n                                    widgetSizes.push(sizedObject)\n                                }\n                            }\n\n                            if (widgetSizes.length > 0) {\n                                widgetConfigs.push(...widgetSizes)\n                            } else {\n                                widgetConfigs.push(baseObject)\n                            }\n\n                        })\n \n                    }\n                    updateWidgets(widgetConfigs)\n                }\n            }).catch(err => console.warn(err))\n    }, [])\n\n\n    const handleLogin = () => {\n        fetch(API_URL+'/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'user_id': deviceName,\n                'secret': secret\n            })}).then((resp) => resp.json()).then((json) => {\n                if (json.success === true) {\n                    changeUserLoggedIn(true);\n                } else {\n                    setFailedLogin(true)\n                    updateDeviceName(\"\")\n                    updateSecret(\"\")\n                }\n            }).catch((err) => {\n                setFailedLogin(true)\n                console.warn(err)\n            })\n        }\n    \n    \n    const saveGrid = () => {\n        changeSaving(true)\n        const to_send = {\n            'user_id': deviceName,\n            'secret': secret,\n            'grid': gridWidgets\n        }\n        fetch(API_URL+'/set-grid', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(to_send)\n        }).then((resp) => resp.json()).then((json) => {\n            changeSaving(false)\n            if (json.success === true) {\n                triggerGetConfig((current) => !current)\n            } else {\n                console.warn('Couldn\\'t save config')\n            }\n        }).catch((err) => {console.warn(err)})\n    }\n    return (\n        <>\n            { saving ? <div className=\"savingScreen\">\n                <div className=\"loadingBox\"></div>\n            </div> : <></> }\n            <Modal\n                show={!userLoggedIn}\n                backdrop=\"static\"\n                centered\n                keyboard={false}>\n\n                <Modal.Header>\n                    <Modal.Title>Sign In</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={(e) => {e.preventDefault()}}>\n                        <Form.Group>\n                            <Form.Label>Device name</Form.Label>\n                            <Form.Control \n                                type=\"text\" \n                                value={deviceName}\n                                onChange={(event) => updateDeviceName(event.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Secret</Form.Label>\n                            <Form.Control \n                                type=\"password\" \n                                value={secret}\n                                onChange={(event) => updateSecret(event.target.value)}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    {failedLogin ? <Alert variant=\"danger\">Login failed</Alert> : <></>}\n                    <Button variant=\"primary\" size=\"lg\" onClick={handleLogin}>Sign in</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <DndProvider backend={HTML5Backend}>\n                <Container style={{marginTop: \"60px\", maxWidth: \"1250px\"}}>\n                    <Row style={{backgroundColor: \"rgba(100, 100, 100, 0.1)\", padding: \"40px 0px\", marginBottom: \"50px\"}}>\n                        <Col sm=\"12\" lg=\"5\" style={{\n                            height: \"1000px\", \n                            backgroundColor: \"rgba(212, 204, 188)\", \n                            marginLeft: 100/24 + \"%\",\n                            marginRight: 100/12 + \"%\"\n                        }}>\n                            <div style={{\n                                position: \"absolute\",\n                                top: \"15px\",\n                                left: \"15px\",\n                                width: \"calc(100% - 30px)\",\n                                height: \"calc(100% - 30px\"\n                            }}>\n                                <Grid \n                                    gridWidgets={gridWidgets} \n                                    changeGridWidgets={changeGridWidgets}\n                                />\n                            </div>\n                        </Col>\n                        <Col sm=\"12\" lg=\"5\">\n                            <ControlPanel widgets={widgets} config={config} triggerGetConfig={triggerGetConfig}/>\n                        </Col>\n                    </Row>\n                    <Row style={{marginBottom: \"100px\"}}>\n                        <Button onClick={saveGrid} variant=\"primary\" style={{display: \"block\", margin: \"0px auto\", width: \"250px\"}}>Save Grid</Button>\n                    </Row>\n                </Container>\n            </DndProvider>\n        </>\n    )\n}\n\nfunction Grid({gridWidgets, changeGridWidgets}) {\n\n    const width = 3\n    const height = 5\n\n    const gridTiles = [];\n    for(let i=0 ; i<width*height ; i++) {\n        const position = [i%width, Math.floor(i/width)]\n        gridTiles.push(<GridTile key={i} position={position} changeGridWidgets={changeGridWidgets}/>)\n    }\n\n    const removeCallback = (index) => {\n        const copyWidgets = gridWidgets.filter((ele, eleIndex) => eleIndex != index)\n        changeGridWidgets(copyWidgets)\n    }\n\n    const editCallback = (index, newConfig) => {\n        const newWidget = cloneDeep(gridWidgets[index])\n        newWidget.config = newConfig\n        const copyWidgets = cloneDeep(gridWidgets)\n        copyWidgets[index] = newWidget\n        changeGridWidgets(copyWidgets)\n    }\n    \n    return (\n        <div style={{\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"0px\",\n            width: \"100%\",\n            height: \"100%\"\n        }}>\n            {gridTiles.map((gridTile) => gridTile)}\n            {gridWidgets.map((gridWidget, index) => <GridWidget \n                                                        key={index} \n                                                        index={index} \n                                                        widget={gridWidget} \n                                                        removeCallback={removeCallback} \n                                                        editCallback={editCallback} \n                                                    />)}\n        </div>\n    )\n}\n\nfunction GridTile({position, changeGridWidgets}) {\n    \n    const onDrop = (item) => {\n        changeGridWidgets((current) => [...current, createGridWidgetFromWidget(item, position)])\n    }\n\n    const [{}, drop] = useDrop(() => ({\n        accept: WidgetDragTypes.WIDGET,\n        drop: (item) => {onDrop(item)},\n    }))\n    \n    return (\n        <div style={{\n            position: \"absolute\",\n            top: position[1] * 100/5 + \"%\",\n            left: position[0] * 100/3 + \"%\",\n            height: 100/5 + \"%\",\n            width: 100/3 + \"%\",\n            padding: \"10px\"\n        }}\n        ref={drop}>\n        <div style={{backgroundColor: \"rgba(0, 0, 0, 0.2)\", height: \"100%\", width: \"100%\"}}></div></div>\n    )\n}\n\n\nfunction GridWidget({widget, index, removeCallback, editCallback}) {\n\n    // Widget overlayed on top of GridTile\n    const size = widget.size\n    const [modalOpen, setModalOpen] = useState(false)\n    const [configValue, updateConfigValue] = useState(cloneDeep(widget.config))\n\n    const removeWrapper = () => {\n        removeCallback(index)\n    }\n\n    const saveChanges = () => {\n        editCallback(index, configValue)\n        setModalOpen(false)\n    }\n\n    const updateConfigValueWrapper = (configKey, value) => {\n        updateConfigValue((current) => {\n            const old = cloneDeep(current)\n            old[configKey] = value\n            return old\n        })\n    }\n\n    return (\n        <div style={{\n            position: \"absolute\",\n            width: size.width*100/3 + \"%\",\n            height: size.height*100/5 + \"%\",\n            left: widget.x*100/3 + \"%\",\n            top: widget.y*100/5 + \"%\",\n            padding: \"10px\"\n        }}>\n            {widget.config != null ?\n            <Modal\n                show={modalOpen}\n            >\n                <Modal.Header>{widget.title}</Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        {Object.entries(configValue).map(([key, val]) => <GridWidgetFormItem key={key} configKey={key} configValue={val} updateConfigValueCallback={updateConfigValueWrapper}/>)}\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={saveChanges}>Confirm</Button>\n                    <Button onClick={() => {setModalOpen(false)}}>Cancel</Button>\n                </Modal.Footer>\n            </Modal> :\n            <></> }\n            <div style={{\n                backgroundColor: \"rgba(30, 18, 26)\", \n                width: \"100%\", \n                height: \"100%\",\n                padding: \"10px\"}}>\n                <p style={{color: \"white\", fontSize: \"12px\"}}>{widget.title}</p>\n                <a size=\"sm\" style={{\n                    position: \"absolute\",\n                    right: \"20px\",\n                    top: \"20px\",\n                    height: \"25px\",\n                    width: \"25px\",\n                    borderRadius: \"5px\",\n                    color: \"white\",\n                    border: \"1px solid white\",\n                    paddingTop: \"0px\",\n                    textAlign: \"center\",\n                    cursor: \"pointer\"\n                }} variant=\"outline-light\" onClick={removeWrapper}>X</a>\n\n                {widget.config != null ? \n                <div style={{\n                    position: \"absolute\",\n                    bottom: \"10px\",\n                    right: \"10px\",\n                    padding: \"5px 10px\",\n                    borderTop: \"2px solid white\",\n                    borderLeft: \"2px solid white\",\n                    borderTopLeftRadius: \"5px\",\n                    backgroundColor: \"white\",\n                    color: \"black\",\n                    zIndex: \"10\",\n                    fontWeight: \"600\",\n                    cursor: \"pointer\"\n                }} onClick={() => setModalOpen(true)}>Edit</div> \n                : <></>}\n                \n                <img src={widget.iconURL} style={{\n                    position: \"absolute\",\n                    maxWidth: \"50%\",\n                    maxHeight: \"50%\",\n                    left: \"50%\",\n                    top: \"50%\",\n                    transform: \"translateX(-50%) translateY(-50%)\",\n                    filter: \"brightness(0) invert(1)\"\n                }}/>\n\n            </div>\n        </div>\n    )\n}\n\nfunction GridWidgetFormItem({configKey, configValue, updateConfigValueCallback}) {\n\n    const [formValue, updateFormValue] = useState(cloneDeep(configValue)) // Deep copy?\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n    const updateFormValueWrapper = (key, value) => {\n        updateFormValue(value)\n        updateConfigValueCallback(key, value)\n        forceUpdate()\n    }\n\n    const listUpdate = (index, value) => {\n        const newArray = cloneDeep(formValue)\n        if (index >= formValue.length) {\n            newArray.push(\"\")\n        } else {\n            newArray[index] = value\n        }\n        updateFormValueWrapper(configKey, newArray)\n    }\n\n    const listRemove = (index) => {\n        const newArray = cloneDeep(formValue).filter((ele, ind) => ind != index)\n        updateFormValueWrapper(configKey, newArray)\n        \n    }\n    if (Array.isArray(formValue)) {\n        return (\n            <Form.Group>\n                <Form.Label>{configKey}</Form.Label>\n                <Container style={{margin: \"0.5rem\"}}>\n                    {formValue.map((val, ind) => {\n                        return (\n                            <Row>\n                                <Col>\n                                    <Row><GridWidgetFormItem \n                                        key={val} \n                                        configValue={val} \n                                        configKey={ind} \n                                        updateConfigValueCallback={listUpdate}\n                                    /></Row>\n                                    <Row><Button onClick={() => {listRemove(ind)}}>Remove</Button></Row>\n                                </Col>\n                            </Row>\n                        )\n                    })}\n                </Container>\n                <Button style={{marginLeft: \"8px\", marginTop: \"30px\"}} onClick={() => {listUpdate(formValue.length, \"\")}}>Add item</Button>\n            </Form.Group>\n        )\n    }\n\n    return (\n        <Form.Group>\n            <Form.Label>{configKey}</Form.Label>\n                <Form.Control \n                    type=\"text\" \n                    value={formValue}\n                    onChange={(event) => updateFormValueWrapper(configKey, event.target.value)}\n                />\n        </Form.Group>\n    )\n}\n\nfunction ControlPanel({widgets, config, triggerGetConfig}) {\n\n    return (\n        <Tabs>\n            <Tab title=\"Widgets\" eventKey=\"widgets\" >\n                <Widgets widgets={widgets} />\n            </Tab>\n            <Tab title=\"Config\" eventKey=\"config\">\n                <Config config={config} triggerGetConfig={triggerGetConfig}/>\n            </Tab>\n        </Tabs>\n    )\n}\n\nfunction Widgets({widgets}) {\n    \n    return (\n        <CardColumns style={{paddingTop: \"1rem\"}}>\n            {Object.values(widgets).map((ele, index) => <Widget key={index} widgetInfo={ele} />)}\n        </CardColumns>\n    )\n}\n\nfunction Widget({widgetInfo}) {\n\n    const [_, drag] = useDrag(() => ({\n        type: WidgetDragTypes.WIDGET,\n        item: widgetInfo,\n      }))\n    \n    return (\n        <Card ref={drag}>\n            <Card.Img variant=\"top\" src={widgetInfo.iconURL} style={{pointerEvents: \"none\"}} />\n            <Card.Body>\n                <Card.Title>{widgetInfo?.title}</Card.Title>\n                {widgetInfo?.description != null ? <Card.Text>{widgetInfo.description}</Card.Text> : <></>}\n            </Card.Body>\n        </Card>\n    )\n}\n\nfunction Config({config, triggerGetConfig}) {\n    const initialTheme = config.bgColor != null ? config.bgColor : \"light\"\n    const initialRefreshRate = config.refreshFrequency != null ? config.refreshFrequency : 20\n\n    const [selectedTheme, changeSelectedTheme] = useState(initialTheme)\n    const [refreshRate, changeRefreshRate] = useState(initialRefreshRate)\n\n    const handleSaveChanges = (event) => {\n        event.preventDefault()\n        fetch(API_URL+'/set-config', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'user_id': 'test-new-data',\n                'secret': 'password',\n                'config': {\n                    'refreshFrequency': refreshRate,\n                    'bgColor': selectedTheme\n                }\n            })\n        }).then(resp => resp.json()).then((json) => {\n            if (json.success !== true) {\n                console.warn('Save did not succeed, there must be a problem somewhere')\n                console.log('you should look into this')\n            } else {\n                triggerGetConfig((current) => !current)\n            }\n        }).catch((err) => {console.warn(err)})\n    };\n\n    return (\n        <Form className=\"mb-3\" style={{paddingTop: \"1rem\"}} onSubmit={(e) => {e.preventDefault()}}>\n            <Form.Group>\n                <Form.Label>Device theme:</Form.Label>\n                <Button \n                    variant={selectedTheme == \"light\" ? \"secondary\" : \"outline-secondary\"} \n                    style={{margin: \"0.5rem\"}}\n                    onClick={() => changeSelectedTheme(\"light\")}\n                >\n                    Light\n                </Button>\n                <Button \n                    variant={selectedTheme == \"dark\" ? \"secondary\" : \"outline-secondary\"} \n                    style={{margin: \"0.5rem\"}}\n                    onClick={() => changeSelectedTheme(\"dark\")}\n                >\n                    Dark\n                </Button>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Screen refresh rate (in seconds):</Form.Label>\n                <Form.Control \n                    type=\"number\" \n                    placeholder={initialRefreshRate} \n                    value={refreshRate}\n                    onChange={(event) => changeRefreshRate(event.target.value)}\n                />\n            </Form.Group>\n            {initialTheme != selectedTheme || refreshRate != initialRefreshRate ? \n                <Button variant=\"secondary\" type=\"submit\" onClick={handleSaveChanges}>Save changes</Button> : \n            <></>}\n        </Form>\n    )\n}\n\nexport default Editor","export default __webpack_public_path__ + \"static/media/logo.d09f2a62.svg\";","import {useState} from \"react\"\nimport {\n  Button,\n  Navbar, \n} from \"react-bootstrap\"\nimport HomePage from './pages/HomePage.js'\nimport Editor from './pages/Editor.js'\nimport logo from \"./images/logo.svg\"\n\nfunction App() {\n  const [homePage, setHomePage] = useState(true)\n\n  return (\n    <div>\n      <Navbar className=\"fadeIn\"\n        variant=\"light\"\n        style = {{\n          position: \"relative\", \n          backgroundColor: homePage ? \"transparent\" : \"rgba(0, 0, 0, 0.1)\", \n          zIndex: 2, \n          padding: \"30px\", \n          height: homePage ? \"140px\" : \"80px\",\n          transition: \"all 0.2s\"\n        }}\n      >\n        <Navbar.Brand href=\"#\"><img src={logo} style={{\n          height: homePage ? \"100px\" : \"60px\",\n          transition: \"all 0.2s\"\n        }}></img></Navbar.Brand>\n        {homePage ?\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Button \n              style={{backgroundColor: 'rgb(255, 66, 49)', border: \"none\"}}\n              className=\"justify-content-end\" \n              onClick={() => setHomePage(!homePage)} \n              variant=\"secondary\"\n            >\n              Go to dashboard\n            </Button></Navbar.Collapse>:\n          <h1 class=\"fadeIn\" style={{\n            position: \"absolute\", \n            left: \"50%\", \n            transform: \"translateX(-50%)\",\n            fontWeight: \"600\",\n            color: \"rgb(20, 20, 20)\"\n          }}>Dashboard</h1>\n        }\n      </Navbar>\n      {homePage ? <HomePage /> : <Editor />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}